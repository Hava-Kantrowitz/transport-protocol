#!/usr/bin/python3

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
HEADER_SIZE = 8
TIMEOUT = 30
SEQ = 0
ACK = 0
WIN_SIZE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def make_packet(data, flags):
    global SEQ, ACK
    pckt = SEQ.to_bytes(2, "little")
    pckt += ACK.to_bytes(2, "little")
    pckt_len = HEADER_SIZE + len(data)
    pckt_len_flags = pckt_len << 4 | flags
    pckt += pckt_len_flags.to_bytes(2, "little")
    pckt += WIN_SIZE.to_bytes(2, "little")
    pckt += data.encode("ascii")
    return pckt

def recv_ack(msg):
    global ACK
    seq = int.from_bytes(msg[0:2], "little")
    ACK = int.from_bytes(msg[2:4], "little")
    pckt_len_flags = int.from_bytes(msg[4:6], "little")
    flags = pckt_len_flags & 7
    pckt_len = pckt_len_flags >> 4
    WIN_SIZE = int.from_bytes(msg[6:8], "little")

def send_next_packet():
    global SEQ

    data = sys.stdin.read(DATA_SIZE) #todo: read all data instead of just 1000
    if (len(data) > 0):
    
        msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False}).encode("ascii")
        SEQ += 1

        if sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(SEQ) + " (" + str(len(data)) + ")")
        return True
    else:
        return False

#todo: do the syn/ack thing

# Send first packet
send_next_packet()

# Now read in data, send packets
while True:
    log("ABOUT TO SLEEP")
    result = sock.recvfrom(MSG_SIZE)

    if result:
        (data, addr) = result
        try:
            decoded = json.loads(data)

            # If there is an ack, send next packet
            if decoded['ack'] == SEQUENCE:
                log("[recv ack] " + str(SEQUENCE))

            # Try to send next packet; break if no more data
            if (not send_next_packet()):
                break
        except (ValueError, KeyError, TypeError):
            log("[recv corrupt packet]")
    else:
        log("[error] timeout")
        sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}).encode("ascii"), dest)
sys.exit(0)
