#!/usr/bin/python3

import sys
import socket
import datetime
import math

DATA_SIZE = 1440
TIMEOUT_ACKS = 0.5
MAX_NO_ACK_RETRANS = 5
SEQ = 1
seq_nums = {}
num_no_ack_retrans = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT_ACKS)

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def make_packet(data, num_pckts):
    pckt = SEQ.to_bytes(2, "little")
    pckt += num_pckts.to_bytes(2, "little")
    pckt += data.encode("ascii")
    return pckt

def send_packets():
    global SEQ
    data = sys.stdin.read()
    num_pckts = math.ceil(len(data) / DATA_SIZE)
    focusData = data
    if (len(data) > 0):
        while len(focusData) > DATA_SIZE:
            packet_data = ""
            for byte in range(0, DATA_SIZE): 
                packet_data = packet_data + focusData[byte] 
                
            msg = make_packet(packet_data, num_pckts) 
            seq_nums[SEQ] = msg
            log("[sending] " + str(SEQ))
            sock.sendto(msg, dest)
            SEQ += 1
            focusData = data[DATA_SIZE:]
            data = focusData

        if len(focusData) > 0: 
            msg = make_packet(focusData, num_pckts) 
            seq_nums[SEQ] = msg
            log("[sending] " + str(SEQ))
            sock.sendto(msg, dest) 
            SEQ += 1
    
    else:
        log("no data to send")
        sys.exit(0)


send_packets()

# Responding to ACKs and FINs
while True:
    log("ABOUT TO SLEEP")
    try:
        result = sock.recvfrom(DATA_SIZE)
        num_no_ack_retrans = 0

        if result:
            (data, addr) = result
            decoded = int.from_bytes(data, "little")
            if decoded == 0:
                log("Receiver received all data - exiting")
                sys.exit(0)

            #remove acked packet from dict
            if decoded in seq_nums.keys(): 
                del seq_nums[decoded] 
                log("[recv ack] " + str(decoded))

            #if all acks received, break out
            if len(seq_nums.keys()) == 0:
                break
        else:
            log("[error] timeout")
            sys.exit(-1)

    except OSError:
        num_no_ack_retrans += 1
        if num_no_ack_retrans >= MAX_NO_ACK_RETRANS:
            log("no ack retransmits exceeded, all data might have been received - exiting")
            sys.exit(0)
 
        for seq_num in seq_nums.keys():
            log("[retransmit] " + str(seq_num))
            sock.sendto(seq_nums[seq_num], dest)

sys.exit(0)
