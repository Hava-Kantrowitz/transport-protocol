#!/usr/bin/python3 -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import datetime

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1472
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

log("[bound] " + str(UDP_PORT))

num_pckts = 0
packets = {}

# Now listen for packets
while True:
    try:
        result = sock.recvfrom(MSG_SIZE)
    except OSError:
        log("timeout")
        sys.exit(-1)

    # If nothing is ready, we hit the timeout
    if result:
        (data, addr) = result
        seq = int.from_bytes(data[0:2], "little")
        num_pckts = int.from_bytes(data[2:4], "little")
        log("[recv data] " + str(seq) + " " + str(num_pckts))
        data = data[4:].decode("ascii")

        # Send back an ack to the sender
        msg = seq.to_bytes(2, "little")
        log("ABOUT TO SEND " + str(int.from_bytes(msg, "little")))
        if sock.sendto(msg, addr) < len(msg):
            log("[error] unable to fully send packet")

        #add data to dict and check if finished
        packets[str(seq)] = data
        if len(packets) == num_pckts:
            seq = 0
            msg = seq.to_bytes(2, "little")
            sock.sendto(msg, addr)
            sock.sendto(msg, addr)
            sock.sendto(msg, addr)

            log("[completed]")
            complete_data = "".join([ packets[str(i)] for i in range(1, num_pckts + 1) ])
            sys.stdout.write(complete_data)
            sys.exit(0)
    else:
        log("[error] timeout")
        sys.exit(-1)
